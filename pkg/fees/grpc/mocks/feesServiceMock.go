// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rsmarincu/glassnode/pkg/fees/grpc (interfaces: FeesService)

// Package mock_grpc is a generated GoMock package.
package mock_grpc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	fees "github.com/rsmarincu/glassnode/pkg/fees"
)

// MockFeesService is a mock of FeesService interface.
type MockFeesService struct {
	ctrl     *gomock.Controller
	recorder *MockFeesServiceMockRecorder
}

// MockFeesServiceMockRecorder is the mock recorder for MockFeesService.
type MockFeesServiceMockRecorder struct {
	mock *MockFeesService
}

// NewMockFeesService creates a new mock instance.
func NewMockFeesService(ctrl *gomock.Controller) *MockFeesService {
	mock := &MockFeesService{ctrl: ctrl}
	mock.recorder = &MockFeesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeesService) EXPECT() *MockFeesServiceMockRecorder {
	return m.recorder
}

// ListFees mocks base method.
func (m *MockFeesService) ListFees(arg0 context.Context, arg1, arg2 uint32) ([]*fees.Fee, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFees", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*fees.Fee)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListFees indicates an expected call of ListFees.
func (mr *MockFeesServiceMockRecorder) ListFees(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFees", reflect.TypeOf((*MockFeesService)(nil).ListFees), arg0, arg1, arg2)
}
